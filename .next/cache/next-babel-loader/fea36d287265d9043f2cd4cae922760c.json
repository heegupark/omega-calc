{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Flex, SimpleGrid } from '@chakra-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nconst useStyles = makeStyles(theme => createStyles({\n  pad: {\n    // width: '300px',\n    alignItems: 'center',\n    justifyContent: 'center' // height: '400px',\n\n  },\n  box: {\n    // width: '100px',\n    alignItems: 'center',\n    justifyContent: 'center' // height: '100px',\n\n  },\n  number: {\n    cursor: 'pointer',\n    backgroundColor: 'rgb(51,51,51)',\n    width: '70px',\n    height: '70px',\n    borderRadius: '50%',\n    color: 'white',\n    fontSize: '36px',\n    alignItems: 'center',\n    justifyContent: 'center',\n    '&:hover': {\n      backgroundColor: 'rgb(75,75,75)'\n    },\n    '&:active': {\n      backgroundColor: 'rgb(115,115,115)'\n    }\n  },\n  sign: {\n    backgroundColor: 'rgb(166,166,166)',\n    color: 'black',\n    fontSize: '30px',\n    '&:hover': {\n      backgroundColor: 'rgb(190,190,190)'\n    },\n    '&:active': {\n      backgroundColor: 'rgb(217,217,217)'\n    }\n  },\n  selectedSymbol: {\n    backgroundColor: 'white',\n    color: 'rgb(242,162,60)',\n    fontSize: '30px',\n    '&:hover': {\n      backgroundColor: 'rgb(190,190,190)'\n    },\n    '&:active': {\n      backgroundColor: 'rgb(217,217,217)'\n    }\n  },\n  symbol: {\n    backgroundColor: 'rgb(242,162,60)',\n    '&:hover': {\n      backgroundColor: 'rgb(243,180,100)'\n    },\n    '&:active': {\n      backgroundColor: 'rgb(244,200,149)'\n    }\n  }\n}));\nexport default function NumberPad(props) {\n  const {\n    0: prev,\n    1: setPrev\n  } = useState(0);\n  const {\n    0: current,\n    1: setCurrent\n  } = useState(0);\n  const {\n    0: symbol,\n    1: setSymbol\n  } = useState('');\n  const {\n    0: symbolFlag,\n    1: setSymbolFlag\n  } = useState(false);\n  const {\n    0: flag,\n    1: setFlag\n  } = useState(false);\n  const classes = useStyles();\n  const keypad = [{\n    value: 'AC',\n    type: 'sign'\n  }, {\n    value: '+/−',\n    type: 'sign'\n  }, {\n    value: '%',\n    type: 'sign'\n  }, {\n    value: '÷',\n    type: 'symbol'\n  }, {\n    value: '7',\n    type: 'number'\n  }, {\n    value: '8',\n    type: 'number'\n  }, {\n    value: '9',\n    type: 'number'\n  }, {\n    value: '×',\n    type: 'symbol'\n  }, {\n    value: '4',\n    type: 'number'\n  }, {\n    value: '5',\n    type: 'number'\n  }, {\n    value: '6',\n    type: 'number'\n  }, {\n    value: '−',\n    type: 'symbol'\n  }, {\n    value: '1',\n    type: 'number'\n  }, {\n    value: '2',\n    type: 'number'\n  }, {\n    value: '3',\n    type: 'number'\n  }, {\n    value: '+',\n    type: 'symbol'\n  }, {\n    value: '0',\n    type: 'number'\n  }, {\n    value: '00',\n    type: 'number'\n  }, {\n    value: '.',\n    type: 'number'\n  }, {\n    value: '=',\n    type: 'symbol'\n  }];\n\n  const calc = (num1, num2, sign) => {\n    switch (sign) {\n      case '+':\n        return num1 + num2;\n\n      case '−':\n        return num1 - num2;\n\n      case '÷':\n        return num1 / num2;\n\n      case '×':\n        return num1 * num2;\n    }\n\n    return 0;\n  };\n\n  const handleNumberClick = input => {\n    let newInput = '';\n    const newCurrent = props.input;\n    const prevInput = flag ? 0 : newCurrent;\n\n    switch (input) {\n      case '0':\n        newInput = prevInput ? prevInput.toString() + input : '0';\n        break;\n\n      case '00':\n        newInput = prevInput ? prevInput.toString() + input : '0';\n        break;\n\n      default:\n        newInput = prevInput ? prevInput.toString() + input : prevInput.toString().substring(1) + input;\n    }\n\n    setFlag(false);\n    setCurrent(Number(newInput));\n    props.setInput(Number(newInput));\n  };\n\n  const initValue = () => {\n    props.setInput(0);\n    setPrev(0);\n    setCurrent(0);\n    setSymbol('');\n    setFlag(false);\n  };\n\n  const handleSignClick = input => {\n    switch (input) {\n      case 'AC':\n        initValue();\n        break;\n\n      case '=':\n        const newInput = calc(prev, current, symbol);\n        setPrev(newInput);\n        props.setInput(newInput);\n        setFlag(true);\n        break;\n\n      default:\n        setFlag(true);\n        setSymbol(input);\n\n        if (symbol === input && symbolFlag) {\n          const newInput = calc(prev, current, symbol);\n          setPrev(newInput);\n          props.setInput(newInput);\n          setSymbolFlag(false);\n        } else {\n          setSymbolFlag(true);\n          setPrev(current);\n        }\n\n    }\n  };\n\n  return __jsx(Flex, {\n    className: classes.pad\n  }, __jsx(SimpleGrid, {\n    columns: 4,\n    spacing: 2\n  }, keypad.map((key, index) => {\n    const keyValue = key.value === 'AC' && props.input ? 'C' : key.value;\n    let classStr = null;\n\n    switch (key.type) {\n      case 'symbol':\n        if (symbol === key.value) {\n          classStr = clsx(classes.number, classes.selectedSymbol);\n        } else {\n          classStr = clsx(classes.number, classes.symbol);\n        }\n\n        break;\n\n      case 'sign':\n        classStr = clsx(classes.number, classes.sign);\n        break;\n\n      default:\n        classStr = classes.number;\n    }\n\n    return __jsx(Flex, {\n      className: classes.box,\n      key: index\n    }, __jsx(Flex, {\n      onClick: () => key.type === 'number' ? handleNumberClick(key.value) : handleSignClick(key.value),\n      className: classStr\n    }, keyValue));\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}