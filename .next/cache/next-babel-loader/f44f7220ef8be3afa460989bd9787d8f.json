{"ast":null,"code":"var _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-calc/components/number-pad.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Flex, SimpleGrid } from '@chakra-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    pad: {\n      // width: '300px',\n      alignItems: 'center',\n      justifyContent: 'center' // height: '400px',\n\n    },\n    box: {\n      // width: '100px',\n      alignItems: 'center',\n      justifyContent: 'center' // height: '100px',\n\n    },\n    number: {\n      cursor: 'pointer',\n      backgroundColor: 'rgb(51,51,51)',\n      width: '70px',\n      height: '70px',\n      borderRadius: '50%',\n      color: 'white',\n      fontSize: '36px',\n      alignItems: 'center',\n      justifyContent: 'center',\n      '&:hover': {\n        backgroundColor: 'rgb(75,75,75)'\n      },\n      '&:active': {\n        backgroundColor: 'rgb(115,115,115)'\n      }\n    },\n    sign: {\n      backgroundColor: 'rgb(166,166,166)',\n      color: 'black',\n      fontSize: '30px',\n      '&:hover': {\n        backgroundColor: 'rgb(190,190,190)'\n      },\n      '&:active': {\n        backgroundColor: 'rgb(217,217,217)'\n      }\n    },\n    symbol: {\n      backgroundColor: 'rgb(242,162,60)',\n      '&:hover': {\n        backgroundColor: 'rgb(243,180,100)'\n      },\n      '&:active': {\n        backgroundColor: 'rgb(244,200,149)'\n      }\n    }\n  });\n});\nexport default function NumberPad(props) {\n  _s();\n\n  var _this = this;\n\n  var classes = useStyles();\n  var keypad = [{\n    value: 'AC',\n    type: 'sign'\n  }, {\n    value: '+/−',\n    type: 'sign'\n  }, {\n    value: '%',\n    type: 'sign'\n  }, {\n    value: '÷',\n    type: 'symbol'\n  }, {\n    value: '7',\n    type: 'number'\n  }, {\n    value: '8',\n    type: 'number'\n  }, {\n    value: '9',\n    type: 'number'\n  }, {\n    value: 'X',\n    type: 'symbol'\n  }, {\n    value: '4',\n    type: 'number'\n  }, {\n    value: '5',\n    type: 'number'\n  }, {\n    value: '6',\n    type: 'number'\n  }, {\n    value: '−',\n    type: 'symbol'\n  }, {\n    value: '1',\n    type: 'number'\n  }, {\n    value: '2',\n    type: 'number'\n  }, {\n    value: '3',\n    type: 'number'\n  }, {\n    value: '+',\n    type: 'symbol'\n  }, {\n    value: '0',\n    type: 'number'\n  }, {\n    value: '00',\n    type: 'number'\n  }, {\n    value: '.',\n    type: 'number'\n  }, {\n    value: '=',\n    type: 'symbol'\n  }];\n\n  var handleNumberClick = function handleNumberClick(input) {\n    var newInput = '';\n\n    switch (input) {\n      case '0':\n        newInput = props.input[0] === '0' ? '0' : props.input + input;\n        break;\n\n      case '00':\n        newInput = props.input[0] === '0' ? '0' : props.input + input;\n        break;\n\n      default:\n        newInput = props.input[0] === '0' ? props.input.substring(1) + input : props.input + input;\n    }\n\n    props.setInput(Number(newInput));\n  };\n\n  var handleSignClick = function handleSignClick(input) {\n    switch (input) {\n      case 'AC':\n        props.setInput('0');\n        break;\n\n      case '%':\n        if (props.input !== '0') {\n          props.setInput((Number(props.input) * 0.01).toString());\n        }\n\n        break;\n\n      default:\n    }\n  };\n\n  return __jsx(Flex, {\n    className: classes.pad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, __jsx(SimpleGrid, {\n    columns: 4,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, keypad.map(function (key, index) {\n    var keyValue = key.value === 'AC' && props.input !== '0' ? 'C' : key.value;\n    return __jsx(Flex, {\n      className: classes.box,\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, __jsx(Flex, {\n      onClick: function onClick() {\n        return key.type === 'number' ? handleNumberClick(key.value) : handleSignClick(key.value);\n      },\n      className: key.type === 'number' ? classes.number : key.type === 'sign' ? clsx(classes.number, classes.sign) : clsx(classes.number, classes.symbol),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 15\n      }\n    }, keyValue));\n  })));\n}\n\n_s(NumberPad, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = NumberPad;\n\nvar _c;\n\n$RefreshReg$(_c, \"NumberPad\");","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-calc/components/number-pad.tsx"],"names":["React","Flex","SimpleGrid","createStyles","makeStyles","clsx","useStyles","theme","pad","alignItems","justifyContent","box","number","cursor","backgroundColor","width","height","borderRadius","color","fontSize","sign","symbol","NumberPad","props","classes","keypad","value","type","handleNumberClick","input","newInput","substring","setInput","Number","handleSignClick","toString","map","key","index","keyValue"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Input, Flex, Box, PseudoBox, SimpleGrid } from '@chakra-ui/core';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    pad: {\n      // width: '300px',\n      alignItems: 'center',\n      justifyContent: 'center',\n      // height: '400px',\n    },\n    box: {\n      // width: '100px',\n      alignItems: 'center',\n      justifyContent: 'center',\n      // height: '100px',\n    },\n    number: {\n      cursor: 'pointer',\n      backgroundColor: 'rgb(51,51,51)',\n      width: '70px',\n      height: '70px',\n      borderRadius: '50%',\n      color: 'white',\n      fontSize: '36px',\n      alignItems: 'center',\n      justifyContent: 'center',\n      '&:hover': {\n        backgroundColor: 'rgb(75,75,75)',\n      },\n      '&:active': {\n        backgroundColor: 'rgb(115,115,115)',\n      },\n    },\n    sign: {\n      backgroundColor: 'rgb(166,166,166)',\n      color: 'black',\n      fontSize: '30px',\n      '&:hover': {\n        backgroundColor: 'rgb(190,190,190)',\n      },\n      '&:active': {\n        backgroundColor: 'rgb(217,217,217)',\n      },\n    },\n    symbol: {\n      backgroundColor: 'rgb(242,162,60)',\n      '&:hover': {\n        backgroundColor: 'rgb(243,180,100)',\n      },\n      '&:active': {\n        backgroundColor: 'rgb(244,200,149)',\n      },\n    },\n  })\n);\n\ninterface INumberPadProps {\n  setInput: (input: number) => void;\n  input: number;\n}\n\nexport default function NumberPad(props: INumberPadProps) {\n  const classes = useStyles();\n  const keypad = [\n    { value: 'AC', type: 'sign' },\n    { value: '+/−', type: 'sign' },\n    { value: '%', type: 'sign' },\n    { value: '÷', type: 'symbol' },\n    { value: '7', type: 'number' },\n    { value: '8', type: 'number' },\n    { value: '9', type: 'number' },\n    { value: 'X', type: 'symbol' },\n    { value: '4', type: 'number' },\n    { value: '5', type: 'number' },\n    { value: '6', type: 'number' },\n    { value: '−', type: 'symbol' },\n    { value: '1', type: 'number' },\n    { value: '2', type: 'number' },\n    { value: '3', type: 'number' },\n    { value: '+', type: 'symbol' },\n    { value: '0', type: 'number' },\n    { value: '00', type: 'number' },\n    { value: '.', type: 'number' },\n    { value: '=', type: 'symbol' },\n  ];\n\n  const handleNumberClick = (input: string) => {\n    let newInput = '';\n    switch (input) {\n      case '0':\n        newInput = props.input[0] === '0' ? '0' : props.input + input;\n        break;\n      case '00':\n        newInput = props.input[0] === '0' ? '0' : props.input + input;\n        break;\n      default:\n        newInput =\n          props.input[0] === '0'\n            ? props.input.substring(1) + input\n            : props.input + input;\n    }\n    props.setInput(Number(newInput));\n  };\n\n  const handleSignClick = (input: string) => {\n    switch (input) {\n      case 'AC':\n        props.setInput('0');\n        break;\n      case '%':\n        if (props.input !== '0') {\n          props.setInput((Number(props.input) * 0.01).toString());\n        }\n        break;\n      default:\n    }\n  };\n\n  return (\n    <Flex className={classes.pad}>\n      <SimpleGrid columns={4} spacing={2}>\n        {keypad.map((key, index: number) => {\n          const keyValue =\n            key.value === 'AC' && props.input !== '0' ? 'C' : key.value;\n          return (\n            <Flex className={classes.box} key={index}>\n              <Flex\n                onClick={() =>\n                  key.type === 'number'\n                    ? handleNumberClick(key.value)\n                    : handleSignClick(key.value)\n                }\n                className={\n                  key.type === 'number'\n                    ? classes.number\n                    : key.type === 'sign'\n                    ? clsx(classes.number, classes.sign)\n                    : clsx(classes.number, classes.symbol)\n                }\n              >\n                {keyValue}\n              </Flex>\n            </Flex>\n          );\n        })}\n      </SimpleGrid>\n    </Flex>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}