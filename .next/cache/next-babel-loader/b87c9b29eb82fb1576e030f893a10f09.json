{"ast":null,"code":"var _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-calc/components/number-pad.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Flex, SimpleGrid } from '@chakra-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    pad: {\n      // width: '300px',\n      alignItems: 'center',\n      justifyContent: 'center' // height: '400px',\n\n    },\n    box: {\n      // width: '100px',\n      alignItems: 'center',\n      justifyContent: 'center' // height: '100px',\n\n    },\n    number: {\n      cursor: 'pointer',\n      backgroundColor: 'rgb(51,51,51)',\n      width: '70px',\n      height: '70px',\n      borderRadius: '50%',\n      color: 'white',\n      fontSize: '36px',\n      alignItems: 'center',\n      justifyContent: 'center',\n      '&:hover': {\n        backgroundColor: 'rgb(75,75,75)'\n      },\n      '&:active': {\n        backgroundColor: 'rgb(115,115,115)'\n      }\n    },\n    sign: {\n      backgroundColor: 'rgb(166,166,166)',\n      color: 'black',\n      fontSize: '30px',\n      '&:hover': {\n        backgroundColor: 'rgb(190,190,190)'\n      },\n      '&:active': {\n        backgroundColor: 'rgb(217,217,217)'\n      }\n    },\n    selectedSymbol: {\n      backgroundColor: 'white',\n      color: 'rgb(242,162,60)',\n      fontSize: '30px',\n      '&:hover': {\n        backgroundColor: 'rgb(190,190,190)'\n      },\n      '&:active': {\n        backgroundColor: 'rgb(217,217,217)'\n      }\n    },\n    symbol: {\n      backgroundColor: 'rgb(242,162,60)',\n      '&:hover': {\n        backgroundColor: 'rgb(243,180,100)'\n      },\n      '&:active': {\n        backgroundColor: 'rgb(244,200,149)'\n      }\n    }\n  });\n});\nexport default function NumberPad(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(0),\n      prev = _useState[0],\n      setPrev = _useState[1];\n\n  var _useState2 = useState(0),\n      current = _useState2[0],\n      setCurrent = _useState2[1];\n\n  var _useState3 = useState(''),\n      symbol = _useState3[0],\n      setSymbol = _useState3[1];\n\n  var _useState4 = useState(false),\n      symbolFlag = _useState4[0],\n      setSymbolFlag = _useState4[1];\n\n  var _useState5 = useState(false),\n      flag = _useState5[0],\n      setFlag = _useState5[1];\n\n  var classes = useStyles();\n  var keypad = [{\n    value: 'AC',\n    type: 'sign'\n  }, {\n    value: '+/−',\n    type: 'sign'\n  }, {\n    value: '%',\n    type: 'sign'\n  }, {\n    value: '÷',\n    type: 'symbol'\n  }, {\n    value: '7',\n    type: 'number'\n  }, {\n    value: '8',\n    type: 'number'\n  }, {\n    value: '9',\n    type: 'number'\n  }, {\n    value: '×',\n    type: 'symbol'\n  }, {\n    value: '4',\n    type: 'number'\n  }, {\n    value: '5',\n    type: 'number'\n  }, {\n    value: '6',\n    type: 'number'\n  }, {\n    value: '−',\n    type: 'symbol'\n  }, {\n    value: '1',\n    type: 'number'\n  }, {\n    value: '2',\n    type: 'number'\n  }, {\n    value: '3',\n    type: 'number'\n  }, {\n    value: '+',\n    type: 'symbol'\n  }, {\n    value: '0',\n    type: 'number'\n  }, {\n    value: '00',\n    type: 'number'\n  }, {\n    value: '.',\n    type: 'number'\n  }, {\n    value: '=',\n    type: 'symbol'\n  }];\n\n  var calc = function calc(num1, num2, sign) {\n    console.log(num1, num2, sign);\n\n    switch (sign) {\n      case '+':\n        return num1 + num2;\n\n      case '−':\n        return num1 - num2;\n\n      case '÷':\n        return num1 / num2;\n\n      case '×':\n        return num1 * num2;\n\n      case '%':\n        return props.input * 0.01;\n\n      case '+/−':\n        return props.input * -1;\n    }\n\n    return 0;\n  };\n\n  var handleNumberClick = function handleNumberClick(input) {\n    var newInput = '';\n    var newCurrent = props.input;\n    var prevInput = flag ? 0 : newCurrent;\n\n    switch (input) {\n      case '0':\n        newInput = prevInput ? prevInput.toString() + input : '0';\n        break;\n\n      case '00':\n        newInput = prevInput ? prevInput.toString() + input : '0';\n        break;\n\n      default:\n        newInput = prevInput ? prevInput.toString() + input : prevInput.toString().substring(1) + input;\n    }\n\n    setFlag(false);\n    setCurrent(Number(newInput));\n    props.setInput(Number(newInput));\n  };\n\n  var initValue = function initValue() {\n    props.setInput(0);\n    setPrev(0);\n    setCurrent(0);\n    setSymbol('');\n    setFlag(false);\n  };\n\n  var handleSignClick = function handleSignClick(input) {\n    switch (input) {\n      case 'AC':\n        initValue();\n        break;\n      // case '%':\n      //   props.setInput(calc(prev, current, input));\n      //   break;\n      // case '+/−':\n      //   props.setInput(calc(prev, current, input));\n      //   break;\n\n      case '=':\n        var newInput1 = calc(prev, current, symbol);\n        setPrev(newInput1);\n        props.setInput(newInput1);\n        setFlag(true);\n        break;\n\n      default:\n        var newInput2 = calc(prev, current, symbol);\n        setFlag(true);\n        setSymbol(input);\n\n        if (symbol === input) {\n          if (symbolFlag) {\n            setPrev(newInput2);\n            props.setInput(newInput2);\n            setSymbolFlag(false);\n          } else {\n            setPrev(props.input);\n          }\n        } else {\n          setPrev(props.input);\n          setSymbolFlag(true);\n        }\n\n    }\n  };\n\n  return __jsx(Flex, {\n    className: classes.pad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 5\n    }\n  }, __jsx(SimpleGrid, {\n    columns: 4,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, keypad.map(function (key, index) {\n    var keyValue = key.value === 'AC' && props.input ? 'C' : key.value;\n    var classStr = null;\n\n    switch (key.type) {\n      case 'symbol':\n        if (symbol === key.value) {\n          classStr = clsx(classes.number, classes.selectedSymbol);\n        } else {\n          classStr = clsx(classes.number, classes.symbol);\n        }\n\n        break;\n\n      case 'sign':\n        classStr = clsx(classes.number, classes.sign);\n        break;\n\n      default:\n        classStr = classes.number;\n    }\n\n    return __jsx(Flex, {\n      className: classes.box,\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }\n    }, __jsx(Flex, {\n      onClick: function onClick() {\n        return key.type === 'number' ? handleNumberClick(key.value) : handleSignClick(key.value);\n      },\n      className: classStr,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 15\n      }\n    }, keyValue));\n  })));\n}\n\n_s(NumberPad, \"0JT3BUurnkWKiCg1kApRg5PjYuE=\", false, function () {\n  return [useStyles];\n});\n\n_c = NumberPad;\n\nvar _c;\n\n$RefreshReg$(_c, \"NumberPad\");","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-calc/components/number-pad.tsx"],"names":["React","useState","Flex","SimpleGrid","createStyles","makeStyles","clsx","useStyles","theme","pad","alignItems","justifyContent","box","number","cursor","backgroundColor","width","height","borderRadius","color","fontSize","sign","selectedSymbol","symbol","NumberPad","props","prev","setPrev","current","setCurrent","setSymbol","symbolFlag","setSymbolFlag","flag","setFlag","classes","keypad","value","type","calc","num1","num2","console","log","input","handleNumberClick","newInput","newCurrent","prevInput","toString","substring","Number","setInput","initValue","handleSignClick","newInput1","newInput2","map","key","index","keyValue","classStr"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Input, Flex, Box, PseudoBox, SimpleGrid } from '@chakra-ui/core';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    pad: {\n      // width: '300px',\n      alignItems: 'center',\n      justifyContent: 'center',\n      // height: '400px',\n    },\n    box: {\n      // width: '100px',\n      alignItems: 'center',\n      justifyContent: 'center',\n      // height: '100px',\n    },\n    number: {\n      cursor: 'pointer',\n      backgroundColor: 'rgb(51,51,51)',\n      width: '70px',\n      height: '70px',\n      borderRadius: '50%',\n      color: 'white',\n      fontSize: '36px',\n      alignItems: 'center',\n      justifyContent: 'center',\n      '&:hover': {\n        backgroundColor: 'rgb(75,75,75)',\n      },\n      '&:active': {\n        backgroundColor: 'rgb(115,115,115)',\n      },\n    },\n    sign: {\n      backgroundColor: 'rgb(166,166,166)',\n      color: 'black',\n      fontSize: '30px',\n      '&:hover': {\n        backgroundColor: 'rgb(190,190,190)',\n      },\n      '&:active': {\n        backgroundColor: 'rgb(217,217,217)',\n      },\n    },\n    selectedSymbol: {\n      backgroundColor: 'white',\n      color: 'rgb(242,162,60)',\n      fontSize: '30px',\n      '&:hover': {\n        backgroundColor: 'rgb(190,190,190)',\n      },\n      '&:active': {\n        backgroundColor: 'rgb(217,217,217)',\n      },\n    },\n    symbol: {\n      backgroundColor: 'rgb(242,162,60)',\n      '&:hover': {\n        backgroundColor: 'rgb(243,180,100)',\n      },\n      '&:active': {\n        backgroundColor: 'rgb(244,200,149)',\n      },\n    },\n  })\n);\n\ninterface INumberPadProps {\n  setInput: (input: number) => void;\n  input: number;\n}\n\nexport default function NumberPad(props: INumberPadProps) {\n  const [prev, setPrev] = useState(0);\n  const [current, setCurrent] = useState(0);\n  const [symbol, setSymbol] = useState('');\n  const [symbolFlag, setSymbolFlag] = useState(false);\n  const [flag, setFlag] = useState(false);\n  const classes = useStyles();\n  const keypad = [\n    { value: 'AC', type: 'sign' },\n    { value: '+/−', type: 'sign' },\n    { value: '%', type: 'sign' },\n    { value: '÷', type: 'symbol' },\n    { value: '7', type: 'number' },\n    { value: '8', type: 'number' },\n    { value: '9', type: 'number' },\n    { value: '×', type: 'symbol' },\n    { value: '4', type: 'number' },\n    { value: '5', type: 'number' },\n    { value: '6', type: 'number' },\n    { value: '−', type: 'symbol' },\n    { value: '1', type: 'number' },\n    { value: '2', type: 'number' },\n    { value: '3', type: 'number' },\n    { value: '+', type: 'symbol' },\n    { value: '0', type: 'number' },\n    { value: '00', type: 'number' },\n    { value: '.', type: 'number' },\n    { value: '=', type: 'symbol' },\n  ];\n\n  const calc = (num1: number, num2: number, sign: string) => {\n    console.log(num1, num2, sign);\n    switch (sign) {\n      case '+':\n        return num1 + num2;\n      case '−':\n        return num1 - num2;\n      case '÷':\n        return num1 / num2;\n      case '×':\n        return num1 * num2;\n      case '%':\n        return props.input * 0.01;\n      case '+/−':\n        return props.input * -1;\n    }\n    return 0;\n  };\n\n  const handleNumberClick = (input: string) => {\n    let newInput = '';\n    const newCurrent = props.input;\n    const prevInput = flag ? 0 : newCurrent;\n    switch (input) {\n      case '0':\n        newInput = prevInput ? prevInput.toString() + input : '0';\n        break;\n      case '00':\n        newInput = prevInput ? prevInput.toString() + input : '0';\n        break;\n      default:\n        newInput = prevInput\n          ? prevInput.toString() + input\n          : prevInput.toString().substring(1) + input;\n    }\n    setFlag(false);\n    setCurrent(Number(newInput));\n    props.setInput(Number(newInput));\n  };\n\n  const initValue = () => {\n    props.setInput(0);\n    setPrev(0);\n    setCurrent(0);\n    setSymbol('');\n    setFlag(false);\n  };\n\n  const handleSignClick = (input: string) => {\n    switch (input) {\n      case 'AC':\n        initValue();\n        break;\n      // case '%':\n      //   props.setInput(calc(prev, current, input));\n      //   break;\n      // case '+/−':\n      //   props.setInput(calc(prev, current, input));\n      //   break;\n      case '=':\n        const newInput1 = calc(prev, current, symbol);\n        setPrev(newInput1);\n        props.setInput(newInput1);\n        setFlag(true);\n        break;\n      default:\n        const newInput2 = calc(prev, current, symbol);\n        setFlag(true);\n        setSymbol(input);\n        if (symbol === input) {\n          if (symbolFlag) {\n            setPrev(newInput2);\n            props.setInput(newInput2);\n            setSymbolFlag(false);\n          } else {\n            setPrev(props.input);\n          }\n        } else {\n          setPrev(props.input);\n          setSymbolFlag(true);\n        }\n    }\n  };\n\n  return (\n    <Flex className={classes.pad}>\n      <SimpleGrid columns={4} spacing={2}>\n        {keypad.map((key, index: number) => {\n          const keyValue = key.value === 'AC' && props.input ? 'C' : key.value;\n          let classStr = null;\n          switch (key.type) {\n            case 'symbol':\n              if (symbol === key.value) {\n                classStr = clsx(classes.number, classes.selectedSymbol);\n              } else {\n                classStr = clsx(classes.number, classes.symbol);\n              }\n              break;\n            case 'sign':\n              classStr = clsx(classes.number, classes.sign);\n              break;\n            default:\n              classStr = classes.number;\n          }\n          return (\n            <Flex className={classes.box} key={index}>\n              <Flex\n                onClick={() =>\n                  key.type === 'number'\n                    ? handleNumberClick(key.value)\n                    : handleSignClick(key.value)\n                }\n                className={classStr}\n              >\n                {keyValue}\n              </Flex>\n            </Flex>\n          );\n        })}\n      </SimpleGrid>\n    </Flex>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}