{"ast":null,"code":"var _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-calc/components/input-pad.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Flex, Box, SimpleGrid } from '@chakra-ui/core';\nexport default function InputPad(props) {\n  _s();\n\n  var _useState = useState('42px'),\n      fontSize = _useState[0],\n      setFontSize = _useState[1];\n\n  useEffect(function () {\n    setFontSize(Number(props.input).toString().length > 11 ? \"\".concat(42 - props.input.toString().length, \"px\") : '42px');\n  }, [props.input]);\n\n  var formatInput = function formatInput(inputStr) {\n    if (props.isOutOfRange) {\n      setFontSize('42px');\n      return 'Out of Range';\n    }\n\n    var hasE = Number(inputStr).toString().includes('e');\n    var hasDot = inputStr.includes('.');\n    var result = '';\n\n    if (hasDot) {\n      result = Number(inputStr.split('.')[0]).toLocaleString() + '.' + inputStr.split('.')[1];\n    } else {\n      result = hasE ? Number(inputStr).toString() : Number(inputStr).toLocaleString();\n    }\n\n    return result;\n  };\n\n  return __jsx(Flex // width=\"300px\"\n  , {\n    align: \"center\",\n    height: \"60px\",\n    color: \"white\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(SimpleGrid, {\n    columns: 1,\n    spacing: 1,\n    width: \"100%\",\n    p: 2,\n    fontSize: fontSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    textAlign: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, formatInput(props.input))));\n}\n\n_s(InputPad, \"4UxuHbqweceuZuT91HxW4FfvpBk=\");\n\n_c = InputPad;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputPad\");","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-calc/components/input-pad.tsx"],"names":["React","useState","useEffect","Flex","Box","SimpleGrid","InputPad","props","fontSize","setFontSize","Number","input","toString","length","formatInput","inputStr","isOutOfRange","hasE","includes","hasDot","result","split","toLocaleString"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAAgBC,IAAhB,EAAsBC,GAAtB,EAAsCC,UAAtC,QAAwD,iBAAxD;AAOA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyC;AAAA;;AAAA,kBACtBN,QAAQ,CAAC,MAAD,CADc;AAAA,MAC/CO,QAD+C;AAAA,MACrCC,WADqC;;AAGtDP,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,WAAW,CACTC,MAAM,CAACH,KAAK,CAACI,KAAP,CAAN,CAAoBC,QAApB,GAA+BC,MAA/B,GAAwC,EAAxC,aACO,KAAKN,KAAK,CAACI,KAAN,CAAYC,QAAZ,GAAuBC,MADnC,UAEI,MAHK,CAAX;AAKD,GANQ,EAMN,CAACN,KAAK,CAACI,KAAP,CANM,CAAT;;AAQA,MAAMG,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD,EAAsB;AACxC,QAAIR,KAAK,CAACS,YAAV,EAAwB;AACtBP,MAAAA,WAAW,CAAC,MAAD,CAAX;AACA,aAAO,cAAP;AACD;;AAED,QAAMQ,IAAI,GAAGP,MAAM,CAACK,QAAD,CAAN,CAAiBH,QAAjB,GAA4BM,QAA5B,CAAqC,GAArC,CAAb;AACA,QAAMC,MAAM,GAAGJ,QAAQ,CAACG,QAAT,CAAkB,GAAlB,CAAf;AACA,QAAIE,MAAM,GAAG,EAAb;;AAEA,QAAID,MAAJ,EAAY;AACVC,MAAAA,MAAM,GACJV,MAAM,CAACK,QAAQ,CAACM,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAD,CAAN,CAA+BC,cAA/B,KACA,GADA,GAEAP,QAAQ,CAACM,KAAT,CAAe,GAAf,EAAoB,CAApB,CAHF;AAID,KALD,MAKO;AACLD,MAAAA,MAAM,GAAGH,IAAI,GACTP,MAAM,CAACK,QAAD,CAAN,CAAiBH,QAAjB,EADS,GAETF,MAAM,CAACK,QAAD,CAAN,CAAiBO,cAAjB,EAFJ;AAGD;;AAED,WAAOF,MAAP;AACD,GAtBD;;AAwBA,SACE,MAAC,IAAD,CACE;AADF;AAEE,IAAA,KAAK,EAAC,QAFR;AAGE,IAAA,MAAM,EAAC,MAHT;AAIE,IAAA,KAAK,EAAC,OAJR;AAKE,IAAA,QAAQ,EAAC,QALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,MAAC,UAAD;AACE,IAAA,OAAO,EAAE,CADX;AAEE,IAAA,OAAO,EAAE,CAFX;AAGE,IAAA,KAAK,EAAC,MAHR;AAIE,IAAA,CAAC,EAAE,CAJL;AAKE,IAAA,QAAQ,EAAEZ,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,MAAC,GAAD;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBM,WAAW,CAACP,KAAK,CAACI,KAAP,CAAnC,CAPF,CAPF,CADF;AAmBD;;GAtDuBL,Q;;KAAAA,Q","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Input, Flex, Box, PseudoBox, SimpleGrid } from '@chakra-ui/core';\n\ninterface IInputPadProps {\n  input: string;\n  isOutOfRange: boolean;\n}\n\nexport default function InputPad(props: IInputPadProps) {\n  const [fontSize, setFontSize] = useState('42px');\n\n  useEffect(() => {\n    setFontSize(\n      Number(props.input).toString().length > 11\n        ? `${42 - props.input.toString().length}px`\n        : '42px'\n    );\n  }, [props.input]);\n\n  const formatInput = (inputStr: string) => {\n    if (props.isOutOfRange) {\n      setFontSize('42px');\n      return 'Out of Range';\n    }\n\n    const hasE = Number(inputStr).toString().includes('e');\n    const hasDot = inputStr.includes('.');\n    let result = '';\n\n    if (hasDot) {\n      result =\n        Number(inputStr.split('.')[0]).toLocaleString() +\n        '.' +\n        inputStr.split('.')[1];\n    } else {\n      result = hasE\n        ? Number(inputStr).toString()\n        : Number(inputStr).toLocaleString();\n    }\n\n    return result;\n  };\n\n  return (\n    <Flex\n      // width=\"300px\"\n      align=\"center\"\n      height=\"60px\"\n      color=\"white\"\n      overflow=\"hidden\"\n    >\n      <SimpleGrid\n        columns={1}\n        spacing={1}\n        width=\"100%\"\n        p={2}\n        fontSize={fontSize}\n      >\n        <Box textAlign=\"right\">{formatInput(props.input)}</Box>\n      </SimpleGrid>\n    </Flex>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}